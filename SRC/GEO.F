	SUBROUTINE ECEF2GEOD(R,POS)
      INCLUDE 'GEO.INC'
	REAL*8    R(3),POS(3)
	REAL*8    SINP,V,R2,Z,ZK
	INTEGER*4 LOOP
	R2=R(1)*R(1)+R(2)*R(2)
	V=RAE
	Z=R(3)
	ZK=0D0
	LOOP=0
	DO 10 WHILE(DABS(Z-ZK).GE.1E-5.AND.LOOP.LE.20)
	   ZK=Z
	   SINP=Z/DSQRT(R2+Z*Z)
	   V=RAE/DSQRT(1D0-EA2*SINP*SINP)
  	   Z=R(3)+V*EA2*SINP
10       LOOP=LOOP+1
      IF(R2.GT.1D-12)THEN
         POS(1)=DATAN(Z/DSQRT(R2))*R2D
         POS(2)=DATAN2(R(2),R(1))*R2D
      ELSE
         IF(R(3).GT.0D0)THEN
         	POS(1)=PI/2D0*R2D
         ELSE
         	POS(1)=-PI/2D0*R2D
         ENDIF
         POS(2)=0D0
      ENDIF
      POS(3)=DSQRT(R2+Z*Z)-V
      POS(3)=POS(3)/1D3
      END

	SUBROUTINE GEOD2ECEF(POS,R)
      INCLUDE 'GEO.INC'
	REAL*8 POS(3),R(3)
	REAL*8 SLAT,SLON,CLAT,CLON,V
	SLAT=DSIN(POS(1)*D2R)
	SLON=DSIN(POS(2)*D2R)
	CLAT=DCOS(POS(1)*D2R)
	CLON=DCOS(POS(2)*D2R)
	V=RAE/DSQRT(1D0-EA2*SLAT*SLAT)
	R(1)=(V+POS(3)*1D3)*CLAT*CLON
	R(2)=(V+POS(3)*1D3)*CLAT*SLON
	R(3)=(V*(1-EA2)+POS(3)*1D3)*SLAT
      END

      SUBROUTINE XYZ2PSH(XYZ,PSH)
      INCLUDE 'GEO.INC'
	REAL*8 XYZ(3),PSH(3)
      CALL CART_TO_POL(XYZ,PSH(1),PSH(2),PSH(3))
      PSH(1:2)=PSH(1:2)*R2D
      PSH(3)=(PSH(3)-RAE)/1D3
      END 

      SUBROUTINE PSH2XYZ(PSH,XYZ)
      INCLUDE 'GEO.INC'
	REAL*8 PSH(3),UPSH(3),XYZ(3)
      UPSH(1:2)=PSH(1:2)*D2R
      UPSH(3)=PSH(3)*1D3+RAE
      CALL POL_TO_CART(UPSH(1),UPSH(2),UPSH(3),XYZ)
      END 
      
      SUBROUTINE GEOD2MAGPSH(TIME2,GEO,MAG)
      REAL*8     GEO(3),XYZ1(3),XYZ2(3),MAG(3)
      INTEGER*4  TIME2(2)
      CALL GEOD2ECEF(GEO,XYZ1)
      CALL GEO_TO_MAG(TIME2,XYZ1,XYZ2)
      CALL XYZ2PSH(XYZ2,MAG)
      END SUBROUTINE

      SUBROUTINE ECEF2MAGPSH(TIME2,GEO,MAG)
      REAL*8     GEO(3),XYZ1(3),XYZ2(3),MAG(3)
      INTEGER*4  TIME2(2)
      XYZ1(1:3)=GEO(1:3)
      CALL GEO_TO_MAG(TIME2,XYZ1,XYZ2)
      CALL XYZ2PSH(XYZ2,MAG)
      END SUBROUTINE
      
      SUBROUTINE MAGPSH2GEOD(TIME2,MAG,GEO)
      REAL*8     GEO(3),XYZ1(3),XYZ2(3),MAG(3)
      INTEGER*4  TIME2(2)
      CALL PSH2XYZ(MAG,XYZ1)
      CALL MAG_TO_GEO(TIME2,XYZ1,XYZ2)
      CALL ECEF2GEOD(XYZ2,GEO)
      END SUBROUTINE

      SUBROUTINE GEOD2SMPSH(TIME2,GEO,SM)
      INCLUDE 'GEO.INC'
      REAL*8     GEO(3),XYZ1(3),XYZ2(3),SM(3)
      INTEGER*4  TIME2(2)
      CALL GEOD2ECEF(GEO,XYZ1)
      CALL GEO_TO_SM(TIME2,XYZ1,XYZ2)
      CALL XYZ2PSH(XYZ2,SM)
      SM(1)=SM(1)*D2R
      SM(2)=MOD(SM(2)+LOCZONE*15D0,360D0)
      SM(2)=SM(2)/15D0+(1.0-SIGN(1.0d0,SM(2)))*12D0
      SM(3)=1+SM(3)*1D3/RAE
      END SUBROUTINE 
      
      SUBROUTINE MAGPSH2SMPSH(TIME2,MAG,SM)
      INCLUDE 'GEO.INC'
      REAL*8     MAG(3),XYZ1(3),XYZ2(3),SM(3)
      INTEGER*4  TIME2(2)
      CALL PSH2XYZ(MAG,XYZ1)
      CALL MAG_TO_SM(TIME2,XYZ1,XYZ2)
      CALL XYZ2PSH(XYZ2,SM)
      SM(1)=SM(1)*D2R
      SM(2)=MOD(SM(2)+LOCZONE*15D0,360D0)
      SM(2)=SM(2)/15D0+(1.0-SIGN(1.0d0,SM(2)))*12D0
      SM(3)=1+SM(3)*1D3/RAE
      END SUBROUTINE      
      
      SUBROUTINE PLEGENDRE_NORM(L,M,X,Y,N,PLEGENDRE,IERR)
      INTEGER*2 N
      INTEGER*4 L,M,IERR
      REAL*8 PLEGENDRE(N),X(N),Y(N),PI
      INTEGER*4 I,LL
      REAL*8 FACT,OLDFACT,PLL(N),PMM(N),PMMP1(N)
      IERR=0
      PI=3.1415926535898D0
      IF(M.LT.0.OR.M.GT.L)IERR=1
      PMM=1D0
      IF(M.GT.0) THEN
        FACT=1D0
        DO 11 I=1,M
          PMM=PMM*FACT/(FACT+1D0)*Y
          FACT=FACT+2D0
11      CONTINUE
      ENDIF
	  PMM=SQRT((2*M+1)*PMM/(4D0*PI));
	  IF (M .NE. 0)THEN
		PMM=-PMM
	  ENDIF
      IF(L.EQ.M) THEN
        PLEGENDRE=PMM
      ELSE
        PMMP1=X*SQRT(2D0*M+3D0)*PMM;
        IF(L.EQ.M+1) THEN
          PLEGENDRE=PMMP1
        ELSE
          DO 12 LL=M+2,L
			FACT=SQRT((4D0*LL*LL-1D0)/(LL*LL-M*M));
			PLL=(X*PMMP1-PMM/OLDFACT)*FACT;
			OLDFACT=FACT;
            PMM=PMMP1
            PMMP1=PLL
12        CONTINUE
          PLEGENDRE=PLL
        ENDIF
      ENDIF
      RETURN
      END SUBROUTINE

      SUBROUTINE PLEGENDRE_RAW(L,M,X,Y,N,PLGNDR,IERR)
      INTEGER*2 N
      INTEGER*4 L,M,IERR
      REAL*8 PLGNDR(N),X(N),Y(N)
      INTEGER*4 I,LL
      REAL*8 FACT,PLL(N),PMM(N),PMMP1(N)
      IERR=0
      IF(M.LT.0.OR.M.GT.L)IERR=1
      PMM=1D0
      IF(M.GT.0) THEN
        FACT=1D0
        DO 11 I=1,M
          PMM=-PMM*FACT*Y
          FACT=FACT+2D0
11      CONTINUE
      ENDIF
      IF(L.EQ.M) THEN
        PLGNDR=PMM
      ELSE
        PMMP1=X*(2*M+1)*PMM
        IF(L.EQ.M+1) THEN
          PLGNDR=PMMP1
        ELSE
          DO 12 LL=M+2,L
            PLL=(X*(2*LL-1)*PMMP1-(LL+M-1)*PMM)/(LL-M)
            PMM=PMMP1
            PMMP1=PLL
12        CONTINUE
          PLGNDR=PLL
        ENDIF
      ENDIF
      RETURN
      END SUBROUTINE

      FUNCTION BESSJ0(X)
      REAL*8 BESSJ0,X
      REAL*8 AX,XX,Z
      DOUBLE PRECISION P1,P2,P3,P4,P5,Q1,Q2,Q3,Q4,Q5,R1,R2,R3,R4,R5,R6,
     *S1,S2,S3,S4,S5,S6,Y
      SAVE P1,P2,P3,P4,P5,Q1,Q2,Q3,Q4,Q5,R1,R2,R3,R4,R5,R6,S1,S2,S3,S4,
     *S5,S6
      DATA P1,P2,P3,P4,P5/1.D0,-.1098628627D-2,.2734510407D-4,
     *-.2073370639D-5,.2093887211D-6/, Q1,Q2,Q3,Q4,Q5/-.1562499995D-1,
     *.1430488765D-3,-.6911147651D-5,.7621095161D-6,-.934945152D-7/
      DATA R1,R2,R3,R4,R5,R6/57568490574.D0,-13362590354.D0,
     *651619640.7D0,-11214424.18D0,77392.33017D0,-184.9052456D0/,S1,S2,
     *S3,S4,S5,S6/57568490411.D0,1029532985.D0,9494680.718D0,
     *59272.64853D0,267.8532712D0,1.D0/
      IF(ABS(X).LT.8.)THEN
        Y=X**2
        BESSJ0=(R1+Y*(R2+Y*(R3+Y*(R4+Y*(R5+Y*R6)))))/(S1+Y*(S2+Y*(S3+Y*
     *(S4+Y*(S5+Y*S6)))))
      ELSE
        AX=ABS(X)
        Z=8./AX
        Y=Z**2
        XX=AX-.785398164
        BESSJ0=SQRT(.636619772/AX)*(COS(XX)*(P1+Y*(P2+Y*(P3+Y*(P4+Y*
     *P5))))-Z*SIN(XX)*(Q1+Y*(Q2+Y*(Q3+Y*(Q4+Y*Q5)))))
      ENDIF
      RETURN
      END FUNCTION

      FUNCTION BESSJ1(X)
      REAL*8 BESSJ1,X
      REAL*8 AX,XX,Z
      DOUBLE PRECISION P1,P2,P3,P4,P5,Q1,Q2,Q3,Q4,Q5,R1,R2,R3,R4,R5,R6,
     *S1,S2,S3,S4,S5,S6,Y
      SAVE P1,P2,P3,P4,P5,Q1,Q2,Q3,Q4,Q5,R1,R2,R3,R4,R5,R6,S1,S2,S3,S4,
     *S5,S6
      DATA R1,R2,R3,R4,R5,R6/72362614232.D0,-7895059235.D0,
     *242396853.1D0,-2972611.439D0,15704.48260D0,-30.16036606D0/,S1,S2,
     *S3,S4,S5,S6/144725228442.D0,2300535178.D0,18583304.74D0,
     *99447.43394D0,376.9991397D0,1.D0/
      DATA P1,P2,P3,P4,P5/1.D0,.183105D-2,-.3516396496D-4,
     *.2457520174D-5,-.240337019D-6/, Q1,Q2,Q3,Q4,Q5/.04687499995D0,
     *-.2002690873D-3,.8449199096D-5,-.88228987D-6,.105787412D-6/
      IF(ABS(X).LT.8.)THEN
        Y=X**2
        BESSJ1=X*(R1+Y*(R2+Y*(R3+Y*(R4+Y*(R5+Y*R6)))))/(S1+Y*(S2+Y*(S3+
     *Y*(S4+Y*(S5+Y*S6)))))
      ELSE
        AX=ABS(X)
        Z=8./AX
        Y=Z**2
        XX=AX-2.356194491
        BESSJ1=SQRT(.636619772/AX)*(COS(XX)*(P1+Y*(P2+Y*(P3+Y*(P4+Y*
     *P5))))-Z*SIN(XX)*(Q1+Y*(Q2+Y*(Q3+Y*(Q4+Y*Q5)))))*SIGN(1D0,X)
      ENDIF
      RETURN
      END FUNCTION

      FUNCTION BESSY0(X)
      REAL*8 BESSY0,X
CU    USES BESSJ0
      REAL*8 XX,Z,BESSJ0
      DOUBLE PRECISION P1,P2,P3,P4,P5,Q1,Q2,Q3,Q4,Q5,R1,R2,R3,R4,R5,R6,
     *S1,S2,S3,S4,S5,S6,Y
      SAVE P1,P2,P3,P4,P5,Q1,Q2,Q3,Q4,Q5,R1,R2,R3,R4,R5,R6,S1,S2,S3,S4,
     *S5,S6
      DATA P1,P2,P3,P4,P5/1.D0,-.1098628627D-2,.2734510407D-4,
     *-.2073370639D-5,.2093887211D-6/, Q1,Q2,Q3,Q4,Q5/-.1562499995D-1,
     *.1430488765D-3,-.6911147651D-5,.7621095161D-6,-.934945152D-7/
      DATA R1,R2,R3,R4,R5,R6/-2957821389.D0,7062834065.D0,
     *-512359803.6D0,10879881.29D0,-86327.92757D0,228.4622733D0/,S1,S2,
     *S3,S4,S5,S6/40076544269.D0,745249964.8D0,7189466.438D0,
     *47447.26470D0,226.1030244D0,1.D0/
      IF(X.LT.8.)THEN
        Y=X**2
        BESSY0=(R1+Y*(R2+Y*(R3+Y*(R4+Y*(R5+Y*R6)))))/(S1+Y*(S2+Y*(S3+Y*
     *(S4+Y*(S5+Y*S6)))))+.636619772*BESSJ0(X)*LOG(X)
      ELSE
        Z=8./X
        Y=Z**2
        XX=X-.785398164
        BESSY0=SQRT(.636619772/X)*(SIN(XX)*(P1+Y*(P2+Y*(P3+Y*(P4+Y*
     *P5))))+Z*COS(XX)*(Q1+Y*(Q2+Y*(Q3+Y*(Q4+Y*Q5)))))
      ENDIF
      RETURN
      END FUNCTION
      
      FUNCTION BESSY1(X)
      REAL*8 BESSY1,X
CU    USES BESSJ1
      REAL*8 XX,Z,BESSJ1
      DOUBLE PRECISION P1,P2,P3,P4,P5,Q1,Q2,Q3,Q4,Q5,R1,R2,R3,R4,R5,R6,
     *S1,S2,S3,S4,S5,S6,S7,Y
      SAVE P1,P2,P3,P4,P5,Q1,Q2,Q3,Q4,Q5,R1,R2,R3,R4,R5,R6,S1,S2,S3,S4,
     *S5,S6,S7
      DATA P1,P2,P3,P4,P5/1.D0,.183105D-2,-.3516396496D-4,
     *.2457520174D-5,-.240337019D-6/, Q1,Q2,Q3,Q4,Q5/.04687499995D0,
     *-.2002690873D-3,.8449199096D-5,-.88228987D-6,.105787412D-6/
      DATA R1,R2,R3,R4,R5,R6/-.4900604943D13,.1275274390D13,
     *-.5153438139D11,.7349264551D9,-.4237922726D7,.8511937935D4/,S1,S2,
     *S3,S4,S5,S6,S7/.2499580570D14,.4244419664D12,.3733650367D10,
     *.2245904002D8,.1020426050D6,.3549632885D3,1.D0/
      IF(X.LT.8.)THEN
        Y=X**2
        BESSY1=X*(R1+Y*(R2+Y*(R3+Y*(R4+Y*(R5+Y*R6)))))/(S1+Y*(S2+Y*(S3+
     *Y*(S4+Y*(S5+Y*(S6+Y*S7))))))+.636619772*(BESSJ1(X)*LOG(X)-1./X)
      ELSE
        Z=8./X
        Y=Z**2
        XX=X-2.356194491
        BESSY1=SQRT(.636619772/X)*(SIN(XX)*(P1+Y*(P2+Y*(P3+Y*(P4+Y*
     *P5))))+Z*COS(XX)*(Q1+Y*(Q2+Y*(Q3+Y*(Q4+Y*Q5)))))
      ENDIF
      RETURN
      END FUNCTION      	
C
	SUBROUTINE CART_TO_POL(X_IN,LAT,LONG,RADIAL)
	PARAMETER (PI=3.1415927)
	REAL*8 LAT,LONG,RADIAL,X_IN(3),ROW
C
	ROW=SQRT(X_IN(1)*X_IN(1)+X_IN(2)*X_IN(2))
	RADIAL=SQRT(ROW*ROW+X_IN(3)*X_IN(3))
	LAT=ATAN2(X_IN(3),ROW)
	LONG=ATAN2(X_IN(2),X_IN(1))
	LONG=LONG + (1.0-SIGN(1.0d0,LONG))*PI
C
	RETURN
	END

C
C	TRANSFORMATION FROM GEI TO GEO COORDINATES
C
C	TIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	TIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE GEI_TO_GEO (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3)
	INTEGER*4 ITIME(2)
C
	CALL T1(ITIME,X_IN,X_OUT,1)
C
	RETURN
	END

C
C	TRANSFORMATION FROM GEI TO GSE COORDINATES
C
C	TIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	TIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE GEI_TO_GSE (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3)
	INTEGER*4 ITIME(2)
C
	CALL T2(ITIME,X_IN,X_OUT,1)
C
	RETURN
	END

C
C	SUBROUTINE FOR COMPUTING THE DIPOLAR AXIS IN GSE COORDINATES
C
	SUBROUTINE GET_Q_C (ITIME,Q_C)
	REAL*8 Q_G(3),Q_C(3),UT,RMJD,FACTOR,PHI,LAMDA,TEMP(3)
	INTEGER*4 ITIME(2)
	PARAMETER (DEGRAD=3.1415927/180.0)
C
	IYR=ITIME(1)/1000
	IDAY=ITIME(1)-IYR*1000
	UT=ITIME(2)/3600000.0
	FRACDAY=UT/24.0
C
C	RMJD=44238.0+FLOAT(IYR-1980)*365.+
C     &		FLOAT((IYR-1977)/4)+FLOAT(IDAY)
C  RMJD = MODIFIED JULIAN DAY = TIME MEASURED IN DAYS FROM 00:00UT NOVEMBER 17, 1858
	RMJD=45.0+FLOAT(IYR-1859)*365.0 + (FLOAT((IYR-1861)/4)+1.0)
     &		+ FLOAT(IDAY) -1.0 + FRACDAY
C
	FACTOR=(RMJD-46066.0)/365.25
	PHI=(78.8+4.283E-2*FACTOR)*DEGRAD
	LAMDA=(289.1-1.413E-2*FACTOR)*DEGRAD
	CALL POL_TO_CART(PHI,LAMDA,1D0,Q_G)
	CALL T1(ITIME,Q_G,TEMP,-1)
	CALL T2(ITIME,TEMP,Q_C,1)
C
	RETURN
	END
C
	SUBROUTINE ROTATE_X(ANGLE,X_INIT,X_TRANS)
C
	REAL*8 ANGLE,X_INIT(3),X_TRANS(3)
C
	X_TRANS(1)=X_INIT(1)
	X_TRANS(2)=X_INIT(2)*DCOS(ANGLE)+X_INIT(3)*DSIN(ANGLE)
	X_TRANS(3)=X_INIT(3)*DCOS(ANGLE)-X_INIT(2)*DSIN(ANGLE)
C
	RETURN
	END
C
	SUBROUTINE ROTATE_Y(ANGLE,X_INIT,X_TRANS)
C
	REAL*8 ANGLE,X_INIT(3),X_TRANS(3)
C
	X_TRANS(1)=X_INIT(1)*DCOS(ANGLE)+X_INIT(3)*DSIN(ANGLE)
	X_TRANS(2)=X_INIT(2)
	X_TRANS(3)=X_INIT(3)*DCOS(ANGLE)-X_INIT(1)*DSIN(ANGLE)
C
	RETURN
	END
C
	SUBROUTINE ROTATE_Z(ANGLE,X_INIT,X_TRANS)
C
	REAL*8 ANGLE,X_INIT(3),X_TRANS(3)
C
	X_TRANS(1)=X_INIT(1)*DCOS(ANGLE)+X_INIT(2)*DSIN(ANGLE)
	X_TRANS(2)=X_INIT(2)*DCOS(ANGLE)-X_INIT(1)*DSIN(ANGLE)
	X_TRANS(3)=X_INIT(3)
C
	RETURN
	END
C
C	FUNCTION SUBROUTINE FOR COMPUTING TIME IN JULIAN CENTURIES
C
C	ITIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	ITIME(2)=MSEC		MILISECONDS OF DAY IN UT
C
	FUNCTION T0(ITIME,IYR,IDAY,UT)
	INTEGER*4 ITIME(2),IYR,IDAY
	REAL*8 UT,T0,RMJD,FRACDAY
C
C GET TIME IN JULIAN CENTURIES
	IYR=ITIME(1)/1000
	IDAY=ITIME(1)-IYR*1000
	UT=ITIME(2)/3600000.0
	FRACDAY=UT/24.0
C
C	RMJD=44238.0+FLOAT(IYR-1980)*365.+
C     &		FLOAT((IYR-1977)/4)+FLOAT(IDAY)
C  RMJD = MODIFIED JULIAN DAY = TIME MEASURED IN DAYS FROM 00:00UT NOVEMBER 17, 1858
	RMJD=45.0+FLOAT(IYR-1859)*365.0 + (FLOAT((IYR-1861)/4)+1.0)
     &		+ FLOAT(IDAY) -1.0 + FRACDAY
	T0=(RMJD-51544.5)/36525.0
C
	RETURN
	END

C
C	TRANSFORMATION MATRIX T1=<THETA,Z>
C
C	IVERSE = 1 STRAIGHT TRANSFORM
C	      =-1 INVERSE TRANSFORM
C
	SUBROUTINE T1(ITIME,X_IN,X_OUT,IVERSE)
C
	REAL*8 THETA,X_IN(3),X_OUT(3),T0,UT,TEMP
	INTEGER*4 ITIME(2),IDAY,IYR,IVERSE
	PARAMETER (DEGRAD=3.1415927/180.0)
C
	TEMP=T0(ITIME,IYR,IDAY,UT)
	THETA=(100.461+36000.770*TEMP+15.04107*UT)*DEGRAD
C
	CALL ROTATE_Z ((IVERSE)*THETA,X_IN,X_OUT)
C
	RETURN
	END

C
C	TRANSFORMATION MATRIX T2=<LAMDAS,Z>*<EPSILON,X>
C
C	IVERSE = 1 STRAIGHT TRANSFORM
C	      =-1 INVERSE TRANSFORM
C
	SUBROUTINE T2(ITIME,X_IN,X_OUT,IVERSE)
	REAL*8 X_IN(3),X_OUT(3),M,CGAMMA,LAMDAS,EPSILON
	REAL*8 TEMP(3),UT,TT0,T0
	INTEGER*4 ITIME(2),IYR,IDAY,IVERSE
	PARAMETER (DEGRAD=3.1415927/180.0)
C
	TT0=T0(ITIME,IYR,IDAY,UT)
	EPSILON=(23.439-0.013*TT0)*DEGRAD
	M=(357.528+35999.05*TT0+0.04107*UT)*DEGRAD
	CGAMMA=280.46+36000.772*TT0+0.04107*UT
	LAMDAS=(CGAMMA+(1.915-0.0048*TT0)*SIN(M)+0.02*SIN(2.0*M))*DEGRAD
C
	IF (IVERSE.EQ.1) THEN
	  CALL ROTATE_X (EPSILON,X_IN,TEMP)
	  CALL ROTATE_Z (LAMDAS,TEMP,X_OUT)
	ELSE
	  CALL ROTATE_Z (IVERSE*LAMDAS,X_IN,TEMP)
	  CALL ROTATE_X (IVERSE*EPSILON,TEMP,X_OUT)
	END IF
C
	RETURN
	END

C
C	ROTATION MATRIX T3=<-PSI,X>
C
C	IVERSE = 1 STRAIGHT TRANSFORM
C	      =-1 INVERSE TRANSFORM
C
	SUBROUTINE T3(ITIME,X_IN,X_OUT,IVERSE)
	REAL*8 X_IN(3),X_OUT(3),Q_C(3),PSI
	INTEGER*4 ITIME(2),IVERSE
C
	CALL GET_Q_C(ITIME,Q_C)
C
	IF(Q_C(3).EQ.0.0) THEN
	  PSI=-SIGN(1.5707963d0,Q_C(2))
	ELSE
	  PSI=-ATAN(Q_C(2)/Q_C(3))
	END IF
	CALL ROTATE_X(IVERSE*PSI,X_IN,X_OUT)
C
	RETURN
	END

C
C	TRANSFORMATION MATRIX T4=<-MU,Y>
C
C	IVERSE = 1 FORWARD TRANSFORM
C	       =-1 INVERSE TRANSFORM
C
	SUBROUTINE T4 (ITIME,X_IN,X_OUT,IVERSE)
	REAL*8 X_IN(3),X_OUT(3),MU,Q_C(3)
	INTEGER*4 ITIME(2),IVERSE
C
	CALL GET_Q_C(ITIME,Q_C)
C
	MU=-ATAN(Q_C(1)/SQRT(Q_C(2)*Q_C(2)+Q_C(3)*Q_C(3)))
	CALL ROTATE_Y(IVERSE*MU,X_IN,X_OUT)
C
	RETURN
	END

C
C	TRANSFORMATION MATRIX T5=<PHI-90,Y>*<LAMDA,Z>
C
C	IVERSE = 1 FORWARD TRANSFORM
C	       =-1 INVERSE TRANSFORM
C
	SUBROUTINE T5 (ITIME,X_IN,X_OUT,IVERSE)
	REAL*8 X_IN(3),X_OUT(3),PHI,LAMDA,RMJD,UT
	REAL*8 TEMP(3),FRACDAY
	INTEGER*4 ITIME(2),IVERSE,IYR,IDAY
	PARAMETER (PID2=3.1415927/2.0,DEGRAD=3.1415927/180.0)
C
	IYR=ITIME(1)/1000
	IDAY=ITIME(1)-IYR*1000
	UT=ITIME(2)/3600000.0
	FRACDAY=UT/24.0
C
C	RMJD=44238.0+FLOAT(IYR-1980)*365.+
C     &		FLOAT((IYR-1977)/4)+FLOAT(IDAY)
C  RMJD = MODIFIED JULIAN DAY = TIME MEASURED IN DAYS FROM 00:00UT NOVEMBER 17, 1858
	RMJD=45.0+FLOAT(IYR-1859)*365.0 + (FLOAT((IYR-1861)/4)+1.0)
     &		+ FLOAT(IDAY) -1.0 + FRACDAY
C
	FACTOR=(RMJD-46066.0)/365.25
	PHI=(78.8+4.283E-2*FACTOR)*DEGRAD
	LAMDA=(289.1-1.413E-2*FACTOR)*DEGRAD
C
	IF (IVERSE.EQ.1) THEN
	  CALL ROTATE_Z(LAMDA,X_IN,TEMP)
	  CALL ROTATE_Y(PHI-PID2,TEMP,X_OUT)
	ELSE
	  CALL ROTATE_Y(IVERSE*(PHI-PID2),X_IN,TEMP)
	  CALL ROTATE_Z(IVERSE*LAMDA,TEMP,X_OUT)
	END IF
C
	RETURN
	END

C
C	TRANSFORMATION FROM GEI TO GSM COORDINATES
C
C	TIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	TIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE GEI_TO_GSM (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3),TEMP1(3)
	INTEGER*4 ITIME(2)
C
	CALL T2(ITIME,X_IN,TEMP1,1)
	CALL T3(ITIME,TEMP1,X_OUT,1)
C
	RETURN
	END

C
C	TRANSFORMATION FROM GEI TO MAG COORDINATES
C
C	TIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	TIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE GEI_TO_MAG (ITIME,X_IN,X_OUT)
C
	REAL*8 X_IN(3),X_OUT(3),TEMP(3)
	INTEGER*4 ITIME(2)
C
	CALL T1(ITIME,X_IN,TEMP,1)
	CALL T5(ITIME,TEMP,X_OUT,1)
C
	RETURN
	END

C
C	TRANSFORMATION FROM GEI TO SM COORDINATES
C
C	TIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	TIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE GEI_TO_SM (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3),TEMP1(3),TEMP2(3)
	INTEGER*4 ITIME(2)
C
	CALL T2(ITIME,X_IN,TEMP1,1)
	CALL T3(ITIME,TEMP1,TEMP2,1)
	CALL T4(ITIME,TEMP2,X_OUT,1)
C
	RETURN
	END


C
C	TRANSFORMATION FROM GEO TO GEI COORDINATES
C
C	TIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	TIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE GEO_TO_GEI (ITIME,X_IN,X_OUT)
C
	REAL*8 X_IN(3),X_OUT(3)
	INTEGER*4 ITIME(2)
C
	CALL T1(ITIME,X_IN,X_OUT,-1)
C
	RETURN
	END

C
C	TRANSFORMATION FROM GEO TO GSE COORDINATES
C
C	TIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	TIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE GEO_TO_GSE (ITIME,X_IN,X_OUT)
C
	REAL*8 X_IN(3),X_OUT(3),TEMP(3)
	INTEGER*4 ITIME(2)
C
	CALL T1(ITIME,X_IN,TEMP,-1)
	CALL T2(ITIME,TEMP,X_OUT,1)
C
	RETURN
	END

C
C	TRANSFORMATION FROM GEO TO GSM COORDINATES
C
C	TIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	TIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE GEO_TO_GSM (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3),TEMP1(3),TEMP2(3)
	INTEGER*4 ITIME(2)
C
	CALL T1(ITIME,X_IN,TEMP1,-1)
	CALL T2(ITIME,TEMP1,TEMP2,1)
	CALL T3(ITIME,TEMP2,X_OUT,1)
C
	RETURN
	END

C
C	TRANSFORMATION FROM GEO TO MAG COORDINATES
C
C	TIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	TIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE GEO_TO_MAG (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3)
	INTEGER*4 ITIME(2)
C
	CALL T5(ITIME,X_IN,X_OUT,1)
C
	RETURN
	END

C
C	TRANSFORMATION FROM GEO TO SM COORDINATES
C
C	TIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	TIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE GEO_TO_SM (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3)
	REAL*8  TEMP1(3),TEMP2(3),TEMP3(3)
	INTEGER*4 ITIME(2)
C
	CALL T1(ITIME,X_IN,TEMP1,-1)
	CALL T2(ITIME,TEMP1,TEMP2,1)
	CALL T3(ITIME,TEMP2,TEMP3,1)
	CALL T4(ITIME,TEMP3,X_OUT,1)
C
	RETURN
	END

C
C	TRANSFORMATION FROM GSE TO GEI COORDINATES
C
C	ITIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	ITIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE GSE_TO_GEI (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3)
	INTEGER*4 ITIME(2)
C
	CALL T2(ITIME,X_IN,X_OUT,-1)
C
	RETURN
	END

C
C	TRANSFORMATION FROM GSE TO GEO COORDINATES
C
C	ITIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	ITIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE GSE_TO_GEO (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3),TEMP(3)
	INTEGER*4 ITIME(2)
C
	CALL T2(ITIME,X_IN,TEMP,-1)
	CALL T1(ITIME,TEMP,X_OUT,1)
C
	RETURN
	END

C
C	TRANSFORMATION FROM GSE TO GSM COORDINATES
C
C	ITIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	ITIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE GSE_TO_GSM (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3)
	INTEGER*4 ITIME(2)
C
	CALL T3(ITIME,X_IN,X_OUT,1)
C
	RETURN
	END

C
C	TRANSFORMATION FROM GSE TO MAG COORDINATES
C
C	ITIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	ITIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE GSE_TO_MAG (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3),TEMP1(3),TEMP2(3)
	INTEGER*4 ITIME(2)
C
	CALL T2(ITIME,X_IN,TEMP1,-1)
	CALL T1(ITIME,TEMP1,TEMP2,1)
	CALL T5(ITIME,TEMP2,X_OUT,1)
C
	RETURN
	END

C
C	TRANSFORMATION FROM GSE TO SM COORDINATES
C
C	ITIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	ITIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE GSE_TO_SM (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3),TEMP(3)
	INTEGER*4 ITIME(2)
C
	CALL T3(ITIME,X_IN,TEMP,1)
	CALL T4(ITIME,TEMP,X_OUT,1)
C
	RETURN
	END

C
C	TRANSFORMATION FROM GSM TO GEI COORDINATES
C
C	ITIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	ITIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE GSM_TO_GEI (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3),TEMP(3)
	INTEGER*4 ITIME(2)
C
	CALL T3(ITIME,X_IN,TEMP,-1)
	CALL T2(ITIME,TEMP,X_OUT,-1)
C
	RETURN
	END

C
C	TRANSFORMATION FROM GSM TO GEO COORDINATES
C
C	ITIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	ITIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE GSM_TO_GEO (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3),TEMP1(3),TEMP2(3)
	INTEGER*4 ITIME(2)
C
	CALL T3(ITIME,X_IN,TEMP1,-1)
	CALL T2(ITIME,TEMP1,TEMP2,-1)
	CALL T1(ITIME,TEMP2,X_OUT,1)
C
	RETURN
	END

C
C	TRANSFORMATION FROM GSM TO GSE COORDINATES
C
C	ITIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	ITIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE GSM_TO_GSE (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3)
	INTEGER*4 ITIME(2)
C
	CALL T3(ITIME,X_IN,X_OUT,-1)
C
	RETURN
	END

C
C	TRANSFORMATION FROM GSM TO MAG COORDINATES
C
C	ITIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	ITIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE GSM_TO_MAG (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3)
	REAL*8  TEMP1(3),TEMP2(3),TEMP3(3)
	INTEGER*4 ITIME(2)
C
	CALL T3(ITIME,X_IN,TEMP1,-1)
	CALL T2(ITIME,TEMP1,TEMP2,-1)
	CALL T1(ITIME,TEMP2,TEMP3,1)
	CALL T5(ITIME,TEMP3,X_OUT,1)
C
	RETURN
	END

C
C	TRANSFORMATION FROM GSM TO SM COORDINATES
C
C	ITIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	ITIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE GSM_TO_SM (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3)
	INTEGER*4 ITIME(2)
C
	CALL T4(ITIME,X_IN,X_OUT,1)
C
	RETURN
	END

C
C	TRANSFORMATION FROM MAG TO GEI COORDINATES
C
C	ITIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	ITIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE MAG_TO_GEI (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3),TEMP1(3)
	INTEGER*4 ITIME(2)
C
	CALL T5(ITIME,X_IN,TEMP1,-1)
	CALL T1(ITIME,TEMP1,X_OUT,-1)
C
	RETURN
	END

C
C	TRANSFORMATION FROM MAG TO GEO COORDINATES
C
C	ITIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	ITIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE MAG_TO_GEO (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3)
	INTEGER*4 ITIME(2)
C
	CALL T5(ITIME,X_IN,X_OUT,-1)
C
	RETURN
	END

C
C	TRANSFORMATION FROM MAG TO GSE COORDINATES
C
C	ITIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	ITIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE MAG_TO_GSE (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3),TEMP1(3),TEMP2(3)
	INTEGER*4 ITIME(2)
C
	CALL T5(ITIME,X_IN,TEMP1,-1)
	CALL T1(ITIME,TEMP1,TEMP2,-1)
	CALL T2(ITIME,TEMP2,X_OUT,1)
C
	RETURN
	END
C
C	TRANSFORMATION FROM MAG TO GSM COORDINATES
C
C	ITIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	ITIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE MAG_TO_GSM (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3)
	REAL*8  TEMP1(3),TEMP2(3),TEMP3(3)
	INTEGER*4 ITIME(2)
C
	CALL T5(ITIME,X_IN,TEMP1,-1)
	CALL T1(ITIME,TEMP1,TEMP2,-1)
	CALL T2(ITIME,TEMP2,TEMP3,1)
	CALL T3(ITIME,TEMP3,X_OUT,1)
C
	RETURN
	END

C
C	TRANSFORMATION FROM MAG TO SM COORDINATES
C
C	ITIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	ITIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE MAG_TO_SM (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3)
	REAL*8  TEMP1(3),TEMP2(3),TEMP3(3),TEMP4(3)
	INTEGER*4 ITIME(2)
C
	CALL T5(ITIME,X_IN,TEMP1,-1)
	CALL T1(ITIME,TEMP1,TEMP2,-1)
	CALL T2(ITIME,TEMP2,TEMP3,1)
	CALL T3(ITIME,TEMP3,TEMP4,1)
	CALL T4(ITIME,TEMP4,X_OUT,1)
C
	RETURN
	END

C
	SUBROUTINE POL_TO_CART(LAT,LONG,RADIAL,X_OUT)
	REAL*8 LAT,LONG,RADIAL,X_OUT(3)
C
	COSLAT=COS(LAT)
C
	X_OUT(1)=RADIAL*COSLAT*COS(LONG)
	X_OUT(2)=RADIAL*COSLAT*SIN(LONG)
	X_OUT(3)=RADIAL*SIN(LAT)
C
	RETURN
	END
C
C	TRANSFORMATION FROM SM TO GEI COORDINATES
C
C	ITIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	ITIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE SM_TO_GEI (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3),TEMP1(3),TEMP2(3)
	INTEGER*4 ITIME(2)
C
	CALL T4(ITIME,X_IN,TEMP1,-1)
	CALL T3(ITIME,TEMP1,TEMP2,-1)
	CALL T2(ITIME,TEMP2,X_OUT,-1)
C
	RETURN
	END

C
C	TRANSFORMATION FROM SM TO GEO COORDINATES
C
C	ITIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	ITIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE SM_TO_GEO (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3)
	REAL*8  TEMP1(3),TEMP2(3),TEMP3(3)
	INTEGER*4 ITIME(2)
C
	CALL T4(ITIME,X_IN,TEMP1,-1)
	CALL T3(ITIME,TEMP1,TEMP2,-1)
	CALL T2(ITIME,TEMP2,TEMP3,-1)
	CALL T1(ITIME,TEMP3,X_OUT,1)
C
	RETURN
	END

C
C	TRANSFORMATION FROM SM TO GSE COORDINATES
C
C	ITIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	ITIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE SM_TO_GSE (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3),TEMP1(3)
	INTEGER*4 ITIME(2)
C
	CALL T4(ITIME,X_IN,TEMP1,-1)
	CALL T3(ITIME,TEMP1,X_OUT,-1)
C
	RETURN
	END

C
C	TRANSFORMATION FROM SM TO GSM COORDINATES
C
C	ITIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	ITIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE SM_TO_GSM (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3)
	INTEGER*4 ITIME(2)
C
	CALL T4(ITIME,X_IN,X_OUT,-1)
C
	RETURN
	END

C
C	TRANSFORMATION FROM SM TO MAG COORDINATES
C
C	ITIME(1)=YYYYDDD		YEAR (YYYY) AND DAY-OF-YEAR (DDD)
C	ITIME(2)=MSEC		MILISECONDS OF DAY IN UT
C	COORDINATES X_IN AND X_OUT ARE CARTESIAN AND REAL*8 
C
	SUBROUTINE SM_TO_MAG (ITIME,X_IN,X_OUT)
C
	REAL*8  X_IN(3),X_OUT(3)
	REAL*8  TEMP1(3),TEMP2(3),TEMP3(3),TEMP4(3)
	INTEGER*4 ITIME(2)
C
	CALL T4(ITIME,X_IN,TEMP1,-1)
	CALL T3(ITIME,TEMP1,TEMP2,-1)
	CALL T2(ITIME,TEMP2,TEMP3,-1)
	CALL T1(ITIME,TEMP3,TEMP4,1)
	CALL T5(ITIME,TEMP4,X_OUT,1)
C
	RETURN
	END
	
	
	
	
	
